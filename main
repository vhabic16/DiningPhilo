#include <array>
#include <mutex>
#include <thread>
#include <atomic>
#include <chrono>
#include <iostream>
#include <string>
#include <random>
#include <iomanip>



std::mutex lock_1;
std::mutex lock_2;

constexpr int num_Philo = 5;

struct fork
{
	std::mutex forkmutex;
};
struct table 
{
	std::atomic<bool>  ready{ false };
	std::array<fork, num_Philo> forks;
};




struct philosopher
{
    std::string const nameofPhilo;
    table const& dinnertable;
    fork& left_fork;
    fork& right_fork;
    std::thread     Lifethread;

    //std::mt19937      rng{ std::random_device{}() };
public:
    philosopher(std::string n, table const& t, fork& l, fork& r) :nameofPhilo(n), dinnertable(t), left_fork(l), right_fork(r), Lifethread(&philosopher::dine, this)
    {
    }

    ~philosopher()
    {
        Lifethread.join();
        // join the threads in the destructor
    }

    void dine()
    {
        while (!dinnertable.ready);

        do
        {
            think();
            eat();
        } while (dinnertable.ready);
    }

    void print(std::string text)
    {
        std::lock_guard<std::mutex> cout_lock(lock_1);
        std::cout << std::left << std::setw(10) << std::setfill(' ')
            << nameofPhilo << text << std::endl;
    }

    void eat()
    {
        std::lock(left_fork.forkmutex, right_fork.forkmutex);

        std::lock_guard<std::mutex> left_lock(left_fork.forkmutex, std::adopt_lock);
        std::lock_guard<std::mutex> right_lock(right_fork.forkmutex, std::adopt_lock);

        print(" started eating.");

        //static thread_local std::uniform_int_distribution<> dist(1, 6);
       // std::this_thread::sleep_for(std::chrono::milliseconds(dist(rng) * 50));
        std::chrono::milliseconds timeout(100);
        print(" finished eating.");
    }

    void think()
    {
      
        std::chrono::milliseconds timeout(500);
        print(" is awake and thinking ");
    }

};
void process()
{

}
void dine()
{

    std::this_thread::sleep_for(std::chrono::seconds(1));
    std::cout << "Dinner started!" << std::endl;

    {
        table table;
        std::array<philosopher, num_Philo> philosophers
        {
           {
              { "Aristotle", table, table.forks[0], table.forks[1] },
              { "Platon",    table, table.forks[1], table.forks[2] },
              { "Descartes", table, table.forks[2], table.forks[3] },
              { "Kant",      table, table.forks[3], table.forks[4] },
              { "Nietzsche", table, table.forks[4], table.forks[0] },
           }
        };

        table.ready = true;
        std::this_thread::sleep_for(std::chrono::seconds(5));
        table.ready = false;
    }

    std::cout << "Dinner done!" << std::endl;

}



int main()
{
	dine();
	return 0;
}
